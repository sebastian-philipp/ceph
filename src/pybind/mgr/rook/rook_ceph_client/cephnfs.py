"""
This file is automatically generated.
Do not modify.
"""

try:
    from typing import Any, Optional, Union, List
except ImportError:
    pass

from ._helper import _omit, CrdObject, CrdObjectList

class Rados(CrdObject):
    _properties = [
        ('pool', 'pool', str, False, False),
        ('namespace', 'namespace', str, False, False)
    ]        

    def __init__(self,
                 pool=_omit,  # type: Optional[str]
                 namespace=_omit,  # type: Optional[str]
                 ):
        self.pool = pool  # type: ignore
        self.namespace = namespace  # type: ignore

    @property
    def pool(self):
        # type: () -> str
        return self._property_impl('pool')
    
    @pool.setter
    def pool(self, new_val):
        # type: (Optional[str]) -> None
        self._pool = new_val
    
    @property
    def namespace(self):
        # type: () -> str
        return self._property_impl('namespace')
    
    @namespace.setter
    def namespace(self, new_val):
        # type: (Optional[str]) -> None
        self._namespace = new_val


class Server(CrdObject):
    _properties = [
        ('active', 'active', int, False, False),
        ('annotations', 'annotations', object, False, False),
        ('placement', 'placement', object, False, False),
        ('resources', 'resources', object, False, False)
    ]        

    def __init__(self,
                 active=_omit,  # type: Optional[int]
                 annotations=_omit,  # type: Optional[Any]
                 placement=_omit,  # type: Optional[Any]
                 resources=_omit,  # type: Optional[Any]
                 ):
        self.active = active  # type: ignore
        self.annotations = annotations  # type: ignore
        self.placement = placement  # type: ignore
        self.resources = resources  # type: ignore

    @property
    def active(self):
        # type: () -> int
        return self._property_impl('active')
    
    @active.setter
    def active(self, new_val):
        # type: (Optional[int]) -> None
        self._active = new_val
    
    @property
    def annotations(self):
        # type: () -> Any
        return self._property_impl('annotations')
    
    @annotations.setter
    def annotations(self, new_val):
        # type: (Optional[Any]) -> None
        self._annotations = new_val
    
    @property
    def placement(self):
        # type: () -> Any
        return self._property_impl('placement')
    
    @placement.setter
    def placement(self, new_val):
        # type: (Optional[Any]) -> None
        self._placement = new_val
    
    @property
    def resources(self):
        # type: () -> Any
        return self._property_impl('resources')
    
    @resources.setter
    def resources(self, new_val):
        # type: (Optional[Any]) -> None
        self._resources = new_val


class Spec(CrdObject):
    _properties = [
        ('rados', 'rados', Rados, False, False),
        ('server', 'server', Server, False, False)
    ]        

    def __init__(self,
                 rados=_omit,  # type: Optional[Rados]
                 server=_omit,  # type: Optional[Server]
                 ):
        self.rados = rados  # type: ignore
        self.server = server  # type: ignore

    @property
    def rados(self):
        # type: () -> Rados
        return self._property_impl('rados')
    
    @rados.setter
    def rados(self, new_val):
        # type: (Optional[Rados]) -> None
        self._rados = new_val
    
    @property
    def server(self):
        # type: () -> Server
        return self._property_impl('server')
    
    @server.setter
    def server(self, new_val):
        # type: (Optional[Server]) -> None
        self._server = new_val


class CephNFS(CrdObject):
    _properties = [
        ('apiVersion', 'apiVersion', str, True, False),
        ('kind', 'kind', str, True, False),
        ('metadata', 'metadata', object, True, False),
        ('status', 'status', object, False, False),
        ('spec', 'spec', Spec, True, False)
    ]        

    def __init__(self,
                 apiVersion,  # type: str
                 metadata,  # type: Any
                 spec,  # type: Spec
                 kind="CephNFS",  # type: str
                 status=_omit,  # type: Optional[Any]
                 ):
        self.apiVersion = apiVersion  # type: ignore
        self.metadata = metadata  # type: ignore
        self.spec = spec  # type: ignore
        self.kind = kind  # type: ignore
        self.status = status  # type: ignore

    @property
    def apiVersion(self):
        # type: () -> str
        return self._property_impl('apiVersion')
    
    @apiVersion.setter
    def apiVersion(self, new_val):
        # type: (str) -> None
        self._apiVersion = new_val
    
    @property
    def kind(self):
        # type: () -> str
        return self._property_impl('kind')
    
    @kind.setter
    def kind(self, new_val):
        # type: (str) -> None
        self._kind = new_val
    
    @property
    def metadata(self):
        # type: () -> Any
        return self._property_impl('metadata')
    
    @metadata.setter
    def metadata(self, new_val):
        # type: (Any) -> None
        self._metadata = new_val
    
    @property
    def status(self):
        # type: () -> Any
        return self._property_impl('status')
    
    @status.setter
    def status(self, new_val):
        # type: (Optional[Any]) -> None
        self._status = new_val
    
    @property
    def spec(self):
        # type: () -> Spec
        return self._property_impl('spec')
    
    @spec.setter
    def spec(self, new_val):
        # type: (Spec) -> None
        self._spec = new_val
